{"ast":null,"code":"var _jsxFileName = \"/Users/bogdanbilovodskyi/Desktop/programming/frontend/react-practice/rgocery-bud/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport List from './List';\nimport Alert from './Alert';\n\nconst getLocalStorage = () => {\n  let list = localStorage.getItem('list');\n\n  if (list) {\n    return JSON.parse(localStorage.getItem('list'));\n  } else {\n    return [];\n  }\n};\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [list, setList] = useState(getLocalStorage());\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const [alert, setAlert] = useState({\n    show: false,\n    msg: '',\n    type: ''\n  });\n  const [status, setStatus] = useState('all'); // const [isActive, setIsActive] = useState(false)\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!name) {\n      showAlert(true, 'Please enter value', 'red');\n    } else if (name && isEditing) {\n      setList(list.map(item => {\n        if (item.id === editId) {\n          return { ...item,\n            title: name\n          };\n        }\n\n        return item;\n      }));\n      setName('');\n      setEditId(null);\n      setIsEditing(false);\n      showAlert(true, 'Item edited', 'green');\n    } else {\n      showAlert(true, 'New item added', 'green');\n      const newItem = {\n        id: new Date().getTime().toString(),\n        title: name\n      };\n      setList([...list, newItem]);\n      setName('');\n    }\n  };\n\n  const showAlert = (show = false, msg = '', type = '') => {\n    setAlert({\n      show,\n      msg,\n      type\n    });\n  };\n\n  const updateStatus = selectedTask => {\n    let taskName = selectedTask.parentElement.lastElementChild;\n\n    if (selectedTask.checked) {\n      taskName.classList.add('checked');\n      list[selectedTask.id].status = 'completed';\n    } else {\n      taskName.classList.remove('checked');\n      list[selectedTask.id].status = 'pending';\n    }\n\n    localStorage.setItem('list', JSON.stringify(list));\n  };\n\n  const clearList = () => {\n    showAlert(true, 'Empty list', 'red');\n    setList([]);\n  };\n\n  const removeItem = id => {\n    showAlert(true, 'Item removed', 'red');\n    setList(list.filter(item => item.id !== id));\n  };\n\n  const editItem = id => {\n    const specificItem = list.find(item => item.id === id);\n    setIsEditing(true);\n    setEditId(id);\n    setName(specificItem.title);\n  };\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(list));\n  }, [list]);\n\n  const showMenu = e => {\n    const currentTask = e.parentElement.lastElementChild;\n    currentTask.classList.add('show');\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, \"Task Manager\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, alert.show && /*#__PURE__*/React.createElement(Alert, Object.assign({}, alert, {\n    removeAlert: showAlert,\n    list: list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"grocery\",\n    placeholder: \"Add a new task\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"add-btn\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, isEditing ? 'Edit' : 'Submit')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"all\",\n    className: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"All\"), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"pending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Pending\"), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Completed\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"clear-btn\",\n    onClick: clearList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Delete all\")), list.length > 0 && /*#__PURE__*/React.createElement(List, {\n    items: list,\n    removeItem: removeItem,\n    editItem: editItem,\n    status: status,\n    showMenu: showMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bogdanbilovodskyi/Desktop/programming/frontend/react-practice/rgocery-bud/src/App.js"],"names":["React","useState","useEffect","List","Alert","getLocalStorage","list","localStorage","getItem","JSON","parse","App","name","setName","setList","isEditing","setIsEditing","editId","setEditId","alert","setAlert","show","msg","type","status","setStatus","handleSubmit","e","preventDefault","showAlert","map","item","id","title","newItem","Date","getTime","toString","updateStatus","selectedTask","taskName","parentElement","lastElementChild","checked","classList","add","remove","setItem","stringify","clearList","removeItem","filter","editItem","specificItem","find","showMenu","currentTask","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport List from './List'\nimport Alert from './Alert'\n\nconst getLocalStorage = () => {\n  let list = localStorage.getItem('list')\n  if(list) {\n    return JSON.parse(localStorage.getItem('list'))\n  } else {\n    return []\n  }\n}\n\nfunction App() {\n  const [name, setName] = useState('')\n  const [list, setList] = useState(getLocalStorage())\n  const [isEditing, setIsEditing] = useState(false)\n  const [editId, setEditId] = useState(null)\n  const [alert, setAlert] = useState({show: false, msg: '', type: ''})\n  const [status, setStatus] = useState('all')\n  // const [isActive, setIsActive] = useState(false)\n  \n  const handleSubmit = e => {\n    e.preventDefault()\n    if (!name) {\n      showAlert(true, 'Please enter value', 'red')\n    } else if (name && isEditing) {\n      setList(list.map((item) => {\n        if(item.id === editId) {\n          return {...item, title: name}\n        }\n        return item\n      }))\n      setName('')\n      setEditId(null)\n      setIsEditing(false)\n      showAlert(true, 'Item edited', 'green')\n    } else {\n      showAlert(true, 'New item added', 'green')\n      const newItem = { id: new Date().getTime().toString(), title: name }\n      setList([...list, newItem])\n      setName('')\n    }\n  }\n\n  const showAlert = (show=false, msg='', type='') => {\n    setAlert({show, msg, type})\n  }\n\n  const updateStatus = (selectedTask) => {\n    let taskName = selectedTask.parentElement.lastElementChild\n    if(selectedTask.checked) {\n        taskName.classList.add('checked')\n        list[selectedTask.id].status = 'completed'\n    } else {\n        taskName.classList.remove('checked')\n        list[selectedTask.id].status = 'pending'\n    }\n    localStorage.setItem('list', JSON.stringify(list))\n  }\n\n  const clearList = () => {\n     showAlert(true, 'Empty list', 'red')\n     setList([])\n  }\n\n  const removeItem = (id) => {\n    showAlert(true, 'Item removed', 'red')\n    setList(list.filter((item) => item.id !== id))\n  } \n\n  const editItem = (id) => {\n    const specificItem = list.find((item) => item.id === id)\n    setIsEditing(true)\n    setEditId(id)\n    setName(specificItem.title)\n  }\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(list))\n  }, [list])\n\n  const showMenu = (e) => {\n    const currentTask = e.parentElement.lastElementChild\n    currentTask.classList.add('show')\n  }\n\n  return <section className='wrapper'>\n    <h1>Task Manager</h1>\n    <p className='alert'>{alert.show && <Alert {...alert} removeAlert={showAlert} list={list}/>}</p>\n    <div className='task-input'>\n      <input type=\"text\" className='grocery' placeholder='Add a new task' value={name} onChange={(e) => setName(e.target.value)}/>\n      <button type='submit' className='add-btn' onClick={handleSubmit}>\n        {isEditing ? 'Edit' : 'Submit'}\n      </button>\n    </div>\n    <div className=\"controls\">\n            <div className=\"filters\">\n                <span id=\"all\" className=\"active\">All</span>\n                <span id=\"pending\">Pending</span>\n                <span id=\"completed\">Completed</span>\n            </div>\n            <button className=\"clear-btn\" onClick={clearList}>Delete all</button>\n      </div>\n    {list.length > 0 && (\n      <List items={list} removeItem={removeItem} editItem={editItem} status={status} showMenu={showMenu}/>\n    )}\n  </section>\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}